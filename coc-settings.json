{
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "objc", "objcpp"],
      "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls-cache"
        }
      }
    },

    "julia": {
      "command": "julia",
      "args": [
        "--startup-file=no",
        "--history-file=no",
        "-e",
        "using LanguageServer; using SymbolServer; using Pkg; env_path = dirname(Pkg.Types.Context().env.project_file); server = LanguageServer.LanguageServerInstance(stdin, stdout, env_path); server.runlinter = false; run(server);"
      ],
      "filetypes": ["julia"],
      "initializationOptions": {},
      "settings": {}
    },

    "fortran": {
        "command": "fortls",
        "args": ["--symbol_skip_mem", "--incrmental_sync", "--autocomplete_no_prefix", "--lowercase_intrinsics"],
        "filetypes": ["fortran"],
    }
  },  // languageserver

  // https://github.com/neoclide/coc-python
  "python": {
      // If false, use MS language server instead
      "jediEnabled": true,
      "linting": {
          "mypyEnabled": false,
          "pylintEnabled": true,
          "prospectorEnabled": false,
          "prospectorArgs": ["--strictness", "low"],
      }
  },

  "coc.source.word.enable": false,
  "coc.source.ultisnips.enable": false,  // replaced by coc-snippets
  "coc.source.omni.filetypes": [],  // filetypes that work with omnicompletion
}
